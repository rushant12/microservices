As part of our Java application‚Äôs integration with HashiCorp Vault for secret management, we request the following information to proceed with development and testing:

üîê Required Vault Configuration Details:
Vault Server URL
(e.g., http://<vault-host>:8200)

Authentication Method

Token-based authentication is planned for initial testing.

Please provide a Vault token with read access to the required secret paths.

Secrets Engine Version

Please confirm if the secrets engine at the mount path is KV version 2.

Secret Path(s)

Full path(s) where secrets are stored (e.g., secret/data/myapp/config)

Expected Secret Keys

List of key names (e.g., username, password, etc.) available at the specified path

List Permissions (Optional)

If listing secrets is required, please confirm whether the token has list capability

üì¶ Maven Dependency
We are planning to use the vault-java-driver (version 5.1.0) for HashiCorp Vault integration.
Could you please confirm if this JAR is available in your Nexus repository?

Once we have the required details and confirmation on the dependency, we‚Äôll proceed with implementation and testing.

import com.bettercloud.vault.Vault;
import com.bettercloud.vault.VaultConfig;
import com.bettercloud.vault.response.LogicalResponse;
import com.bettercloud.vault.response.VaultResponse;

public class VaultClient {
    public static void main(String[] args) {
        try {
            // 1. Configure Vault client
            VaultConfig config = new VaultConfig()
                    .address("http://localhost:8200") // Vault address
                    .token("s.XXXXXXXXXXXXXXXXXXXX")   // Replace with your actual token
                    .engineVersion(2)                // If using KV version 2
                    .build();

            // 2. Create Vault instance
            Vault vault = new Vault(config);

            // 3. Read secret from Vault (path depends on your Vault setup)
            LogicalResponse response = vault.logical().read("secret/data/myapp/config");

            // 4. Extract and print secret values
            String username = response.getData().get("username");
            String password = response.getData().get("password");

            System.out.println("Username: " + username);
            System.out.println("Password: " + password);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
