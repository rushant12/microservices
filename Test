package com.nedbank.vault.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

public class VaultService {

    private static final String AUTH_URL = "https://vault-public-vault-75e984b5.bdecd756.z1.hashicorp.cloud:8200/v1/auth/userpass/login/espire_dev";
    private static final String SECRET_URL = "https://vault-public-vault-75e984b5.bdecd756.z1.hashicorp.cloud:8200/v1/Store_Dev/10099";
    private static final String NAMESPACE = "admin/espire";
    private static final String USER_PASSWORD = "Dev+Cred4#";

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper mapper = new ObjectMapper();

    public String getSecretFromVault() {
        try {
            // 1. Authenticate and get token
            HttpHeaders authHeaders = new HttpHeaders();
            authHeaders.setContentType(MediaType.APPLICATION_JSON);
            authHeaders.set("x-vault-namespace", NAMESPACE);

            String authBody = "{\"password\": \"" + USER_PASSWORD + "\"}";
            HttpEntity<String> authRequest = new HttpEntity<>(authBody, authHeaders);

            ResponseEntity<String> authResponse = restTemplate.postForEntity(AUTH_URL, authRequest, String.class);
            if (!authResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Failed to authenticate with Vault");
            }

            JsonNode authJson = mapper.readTree(authResponse.getBody());
            String token = authJson.at("/auth/client_token").asText();

            // 2. Read secret using token
            HttpHeaders readHeaders = new HttpHeaders();
            readHeaders.set("x-vault-namespace", NAMESPACE);
            readHeaders.set("x-vault-token", token);

            HttpEntity<Void> readRequest = new HttpEntity<>(readHeaders);
            ResponseEntity<String> readResponse = restTemplate.exchange(SECRET_URL, HttpMethod.GET, readRequest, String.class);

            if (!readResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Failed to read secret from Vault");
            }

            return readResponse.getBody();

        } catch (Exception e) {
            throw new RuntimeException("Error while accessing Vault: " + e.getMessage(), e);
        }
    }

    // âœ… Main method to test Vault access
    public static void main(String[] args) {
        VaultService vaultService = new VaultService();
        String secret = vaultService.getSecretFromVault();
        System.out.println("Secret from Vault:\n" + secret);
    }
}
