package com.example.demo.service;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaListenerService {

    private static final Logger logger = LoggerFactory.getLogger(KafkaListenerService.class);

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final BlobStorageService blobStorageService;

    public KafkaListenerService(KafkaTemplate<String, String> kafkaTemplate, BlobStorageService blobStorageService) {
        this.kafkaTemplate = kafkaTemplate;
        this.blobStorageService = blobStorageService;
    }

    @KafkaListener(topics = "your-kafka-topic", groupId = "str-ecp-batch")
    public void consumeKafkaMessage(ConsumerRecord<String, String> record) {
        String message = record.value();
        logger.info("Received Kafka message: {}", message);

        try {
            // Assume message format: {"batchId":"1234", "filePath":"C:/files/sample.csv"}
            String batchId = extractField(message, "batchId");
            String filePath = extractField(message, "filePath");

            logger.info("Parsed batchId: {}, filePath: {}", batchId, filePath);

            // Upload to blob storage
            String blobUrl = blobStorageService.uploadFile(filePath, batchId);

            logger.info("File uploaded to blob storage at URL: {}", blobUrl);

            // Send back to Kafka
            kafkaTemplate.send("summary-topic", batchId, blobUrl);
            logger.info("Sent blob URL to Kafka topic: summary-topic");

        } catch (Exception e) {
            logger.error("Error processing Kafka message: {}", e.getMessage(), e);
        }
    }

    private String extractField(String json, String fieldName) {
        // Use proper JSON parsing (e.g. Jackson)
        com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
        try {
            com.fasterxml.jackson.databind.JsonNode node = mapper.readTree(json);
            return node.get(fieldName).asText();
        } catch (Exception e) {
            throw new RuntimeException("Failed to extract " + fieldName + " from message: " + json, e);
        }
    }

    public void consumeMessageAndStoreFile(String message) {
        // Allows manual trigger from REST controller
        consumeKafkaMessage(new ConsumerRecord<>("manual", 0, 0, null, message));
    }
}
