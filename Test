	public static AfpCmdPTX createPTXRecord(short x_pos, short y_pos, String data, Short mcfCode, int iOrientation, int bOrientation) {
		try {
			ArrayList<AfpPtxDataItem> newPtxDataItems = new ArrayList();
			AfpPtxCtrlSeq newCtrlseq = new AfpPtxCtrlSeq();
			createCtrlSeqPrefix(newPtxDataItems);
			addPtxCtrlSEC(newCtrlseq);
			createPtxCtrlSTO(newCtrlseq);
			createPtxCtrlScfl(newCtrlseq, mcfCode);
			AfpPtxCtrlAMI secondAMI = new AfpPtxCtrlAMI(x_pos, true);
			newCtrlseq.addCtrl(secondAMI);
			AfpPtxCtrlAMB secondAMB = new AfpPtxCtrlAMB(y_pos, true);
			newCtrlseq.addCtrl(secondAMB);
			AfpPtxCtrlSTO secondSTO = new AfpPtxCtrlSTO(new UBIN2(iOrientation), new UBIN2(bOrientation), true);
			newCtrlseq.addCtrl(secondSTO);
			newCtrlseq.addCtrl(new AfpPtxCtrlTRN(data, true));
			newPtxDataItems.add(newCtrlseq);
			return new AfpCmdPTX(newPtxDataItems);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}


----------------------------------------------------------------------------------
for (Map<String, Object> ptx : ptxRecs) {
	                            short x_offset = numToDP(toShort(ptx.get("x_offset")));
	                            short y_offset = numToDP(toShort(ptx.get("y_offset")));
	                            short font_id = toShort(ptx.get("font_id"));
	                            int configOrientation = toIntOrDefault(ptx.get("orientation"), 0);
	                            int bOrientation = toIntOrDefault(ptx.get("bOrientation"), 0);
	                            List<Integer> validOrientations = Arrays.asList(0, 90, 180, 270);
	                            if (!validOrientations.contains(configOrientation)) {
	                                System.err.println("Invalid orientation value in configuration: " + configOrientation
	                                        + ". Valid values are: 0, 90, 180, 270.");
	                                System.exit(1);
	                            }
	                            int orientation = configOrientation;
	                           
	                            String trn_text = (String) ptx.get("trn_text");

	                            if (trn_text.startsWith("FROM_METADATA^")) {
	                                String[] parts = trn_text.split("\\^");
	                                if (parts.length >= 2) {
	                                    String metadata_key = parts[1].trim();
	                                    Object rawVal = rawStmt.getMetaData().opt(metadata_key);

	                                    if (rawVal == null || JSONObject.NULL.equals(rawVal)) {
	                                        System.out.println("Metadata substitution: key='" + metadata_key + "' not found. Using empty string.");
	                                        trn_text = "";
	                                    } else {
	                                        System.out.println("Metadata substitution: key='" + metadata_key + "', value='" + rawVal + "'");
	                                        trn_text = String.valueOf(rawVal);
	                                    }
	                                } else {
	                                    System.out.println("Malformed FROM_METADATA syntax: '" + trn_text + "'");
	                                }
	                            }

	                            AfpCmdPTX ptxRec = createPTXRecord(x_offset, y_offset, trn_text, font_id, orientation, bOrientation);
	                            AfpRec newPTX = ptxRec.toAfpRec((short) 0, 0);
	                            newPtxAfpRecs.add(newPTX);
	                        }




	private int toIntOrDefault(Object val, int defaultVal) {
	    if (val == null) return defaultVal;
	    try {
	        if (val instanceof Number) {
	            return ((Number) val).intValue();
	        } else if (val instanceof String) {
	            return (int) Double.parseDouble((String) val);
	        }
	    } catch (Exception e) {
	    }
	    return defaultVal;
	}




	private short toShort(Object val) {
	    if (val instanceof Number) {
	        return ((Number) val).shortValue();
	    } else if (val instanceof String) {
	        try {
	            return (short) Double.parseDouble((String) val);
	        } catch (NumberFormatException e) {
	            throw new IllegalArgumentException("Invalid short value: " + val, e);
	        }
	    } else {
	        throw new IllegalArgumentException("Expected a numeric value but got: " + val);
	    }
	}

